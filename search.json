[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Allen Daniel Sunny Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Decomposition.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Decomposition","text":"univariate time series data can broken three major components. cyclic repeated motion, general growth pattern remaining unexplained portion. Popularly Seasonality/Cyclicity, Trend Residuals respectively. component can treated separately, summed together get final time series.","code":""},{"path":"/articles/Decomposition.html","id":"trend","dir":"Articles","previous_headings":"","what":"Trend","title":"Decomposition","text":"Trend underlying motion time series can variety forms. can increasing, decreasing can highly random movements. StructuralDecompose, assume trend can broken many different parts based upon breakpoints identified series. different versions Trend","code":"data <- StructuralDecompose::Nile_dataset[,1]  x <- StructuralDecompose(data) x$trend"},{"path":"/articles/Decomposition.html","id":"seasonality","dir":"Articles","previous_headings":"","what":"Seasonality","title":"Decomposition","text":"Seasonality repeated motion time series. Seasonality can broadly either Additive multiplicative. StructuralDecompose automatically identifies seasonality type treats accordingly. two different types seasonality","code":"x <- StructuralDecompose(data) x$seasonality"},{"path":"/articles/Example-Walkthrough.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example-Walkthrough","text":"example, go various features StructuralDecompose. trace ’s behavior popular ‘Nile Dataset’ tracks annual flow Nile river. dataset single break-point series. test algorithm common trend fitting algorithms well.","code":""},{"path":"/articles/Example-Walkthrough.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Example-Walkthrough","text":"StructuralDecompose primarily relies ‘Strucchange’ ‘changepoints’ detection breakpoints. packages added soon. Currently smoothening algorithm defaults loess, add smoothening algorithms future.","code":"library(changepoint) #> Loading required package: zoo #>  #> Attaching package: 'zoo' #> The following objects are masked from 'package:base': #>  #>     as.Date, as.Date.numeric #> Successfully loaded changepoint package version 2.2.4 #>  See NEWS for details of changes. library(strucchange) #> Loading required package: sandwich"},{"path":"/articles/Example-Walkthrough.html","id":"loading-the-data","dir":"Articles","previous_headings":"","what":"Loading the Data","title":"Example-Walkthrough","text":"read data can use simple:","code":"data <- StructuralDecompose::Nile_dataset[,1]"},{"path":"/articles/Example-Walkthrough.html","id":"decomposition","dir":"Articles","previous_headings":"","what":"Decomposition","title":"Example-Walkthrough","text":"Let’s decompose time series parts observe ’s behavior","code":"Results <- StructuralDecompose::StructuralDecompose(Data = StructuralDecompose::Nile_dataset[,1]) Results #> $anomalies #> logical(0) #>  #> $trend_line #>   [1] 1143.0165 1139.3825 1135.1000 1130.1009 1124.4952 1118.4116 1111.9953 #>   [8] 1105.5419 1099.7404 1090.4404 1079.6975 1066.7726 1054.3759 1044.9079 #>  [15] 1040.3976 1041.7962 1050.3959 1065.1117 1082.5641 1099.0113 1112.1002 #>  [22] 1123.4168 1134.8011 1146.4330 1158.1728 1169.7050 1180.6203 1190.5540 #>  [29]  833.5024  833.5034  833.4934  833.4752  833.4514  833.4272  833.4065 #>  [36]  833.3932  833.3944  833.4166  833.4689  833.5577  833.6851  833.8489 #>  [43]  834.0452  834.2708  834.5215  834.7923  835.0776  835.3642  835.6231 #>  [50]  835.8033  835.8232  835.5759  835.2999  834.8540  834.2970  833.6987 #>  [57]  833.1498  832.7101  832.4310  832.3386  832.4194  832.6920  833.1493 #>  [64]  833.7915  834.6195  835.6680  836.9777  838.5399  840.3426  842.3489 #>  [71]  844.4798  846.6768  848.9136  851.1488  853.3382  855.4136  857.2771 #>  [78]  858.9158  859.7719  860.1453  860.2497  860.2100  860.1021  859.9751 #>  [85]  859.8599  859.7724  859.7192  859.7005  859.7147  859.7568  859.8183 #>  [92]  859.8904  859.9611  860.0171  860.0440  860.0260  859.9471  859.7946 #>  [99]  859.5564  859.2252 #>  #> $Deseaonalized_Series #>            Jan          Feb          Mar          Apr          May          Jun #> 1  -18.7612019    7.1895059 -126.3613402   42.1090034   -8.5763045   80.5754157 #> 2   59.8793854  -64.3359209   25.3410554 -119.5862970   85.5229800 -227.1247285 #> 3  106.0825200   36.8670081 -104.8815758 -128.3441136 -103.5834767   45.4836058 #> 4 -137.1390801  173.1553843  262.2698348   97.6522401  -46.7662253  -68.8619571 #> 5  -67.3678306  -28.2313025  -22.0844791  -28.3659388  -15.3810637   66.1330357 #> 6  -47.1641287   18.8799486   57.5894433   72.4184217  105.2993682  100.3190064 #> 7  -32.6583068 -122.5768552   -6.5994893  146.7962819  -41.3581926   54.0711737 #> 8   62.3953791  112.7996040  -16.9804495   25.5094227   71.2041623   -5.7698012 #> 9   63.3081582 -155.2226290  -99.8177275 -157.0152496                           #>            Jul          Aug          Sep          Oct          Nov          Dec #> 1 -198.0885937   94.3961182  273.5206224   -0.3488679  -96.5466504 -137.8025360 #> 2  -23.6573476   10.9267673   -8.8392056   36.6747818    3.3497567   97.5370598 #> 3  141.4133258 -169.5371330  109.8096362  -50.3356580 -144.2556024   76.5768281 #> 4 -277.1385270  -40.3327285 -129.2605019  235.2992977  253.0732861   -9.3941365 #> 5  -35.3902651  -18.7606173  -85.8887287  -86.6185680  195.7198600  -79.3685425 #> 6   85.9290478  141.3981138  -66.0815876 -216.2573620 -207.3289784   -6.7067537 #> 7   89.1348018   -0.2072795 -112.9886454 -161.1184293  -33.9512511  183.9949329 #> 8  261.0883861   16.0476744   44.2999351  260.0744538   40.1068396 -120.0559132 #> 9                                                                               #>  #> $breakpoints #> [1]   0  28 100 #>  #> $trend #>           Jan         Feb         Mar         Apr         May         Jun #> 1 -13.9089332 -11.1765725  -8.4442119  -6.7084486  -4.9726854  -4.1053668 #> 2 -17.7162296 -24.3020719 -30.8879141 -31.4133799 -31.9388456 -23.6804344 #> 3  -0.5855530  -0.6110249  -0.6364968  -5.8222210 -11.0079451 -16.2522446 #> 4  12.2497857   6.2635904   0.2773951   4.5297669   8.7821387  11.9273400 #> 5   7.9576229   8.0398361   8.1220494   0.6338099  -6.8544295 -10.5596832 #> 6  22.3113542  29.1186739  35.9259935  31.6053497  27.2847059  17.3201020 #> 7 -31.2165129 -29.4627200 -27.7089272 -21.8278927 -15.9468581  -7.7326998 #> 8  27.3665482  38.5089018  49.6512553  60.0988627  70.5464702  68.6897996 #> 9 -35.6730592 -55.5674819 -75.4619047 -96.9113720                         #>           Jul         Aug         Sep         Oct         Nov         Dec #> 1  -3.2380483  -2.6044392  -1.9708301  -3.0338405  -4.0968509 -10.9065403 #> 2 -15.4220232 -10.3934520  -5.3648808  -4.5488983  -3.7329157  -2.1592343 #> 3 -21.4965441 -14.7701501  -8.0437561   3.4078770  14.8595101  13.5546479 #> 4  15.0725413   8.7730411   2.4735409  -1.0287350  -4.5310108   1.7133060 #> 5 -14.2649369 -10.9963613  -7.7277857  -1.8881683   3.9514491  13.1314017 #> 6   7.3554981  -1.4999047 -10.3553074 -17.7750970 -25.1948866 -28.2056997 #> 7   0.4814586   6.6893985  12.8973385  15.0184582  17.1395780  22.2530631 #> 8  66.8331290  50.6070803  34.3810317  17.3678247   0.3546177 -17.6592207 #> 9                                                                         #>  #> $seasonality #>           Jan         Feb         Mar         Apr         May         Jun #> 1   -4.255273   13.428022  -45.738705   37.790088   44.081115  -38.986989 #> 2   -4.255273   13.428022  -45.738705   37.790088   44.081115  -38.986989 #> 3   -4.255273   13.428022  -45.738705   37.790088   44.081115  -38.986989 #> 4   -4.255273   13.428022  -45.738705   37.790088   44.081115  -38.986989 #> 5   -4.255273   13.428022  -45.738705   37.790088   44.081115  -38.986989 #> 6   -4.255273   13.428022  -45.738705   37.790088   44.081115  -38.986989 #> 7   -4.255273   13.428022  -45.738705   37.790088   44.081115  -38.986989 #> 8   -4.255273   13.428022  -45.738705   37.790088   44.081115  -38.986989 #> 9   -4.255273   13.428022  -45.738705   37.790088                         #>           Jul         Aug         Sep         Oct         Nov         Dec #> 1 -100.906708   30.061966   -3.261025   49.908433   11.849136    6.029937 #> 2 -100.906708   30.061966   -3.261025   49.908433   11.849136    6.029937 #> 3 -100.906708   30.061966   -3.261025   49.908433   11.849136    6.029937 #> 4 -100.906708   30.061966   -3.261025   49.908433   11.849136    6.029937 #> 5 -100.906708   30.061966   -3.261025   49.908433   11.849136    6.029937 #> 6 -100.906708   30.061966   -3.261025   49.908433   11.849136    6.029937 #> 7 -100.906708   30.061966   -3.261025   49.908433   11.849136    6.029937 #> 8 -100.906708   30.061966   -3.261025   49.908433   11.849136    6.029937 #> 9                                                                         #>  #> $remainder #>            Jan          Feb          Mar          Apr          May          Jun #> 1   -4.8522687   18.3660785 -117.9171283   48.8174521   -3.6036191   84.6807825 #> 2   77.5956150  -40.0338490   56.2289696  -88.1729172  117.4618256 -203.4442941 #> 3  106.6680730   37.4780330 -104.2450790 -122.5218927  -92.5755316   61.7358504 #> 4 -149.3888657  166.8917939  261.9924397   93.1224732  -55.5483640  -80.7892971 #> 5  -75.3254535  -36.2711387  -30.2065285  -28.9997487   -8.5266342   76.6927189 #> 6  -69.4754829  -10.2387253   21.6634498   40.8130720   78.0146624   82.9989045 #> 7   -1.4417939  -93.1141351   21.1094379  168.6241745  -25.4113345   61.8038735 #> 8   35.0288309   74.2907022  -66.6317048  -34.5894400    0.6576922  -74.4596007 #> 9   98.9812174  -99.6551471  -24.3558229  -60.1038776                           #>            Jul          Aug          Sep          Oct          Nov          Dec #> 1 -194.8505455   97.0005574  275.4914524    2.6849726  -92.4497995 -126.8959957 #> 2   -8.2353245   21.3202193   -3.4743248   41.2236801    7.0826724   99.6962941 #> 3  162.9098699 -154.7669829  117.8533923  -53.7435350 -159.1151125   63.0221802 #> 4 -292.2110683  -49.1057696 -131.7340428  236.3280327  257.6042969  -11.1074425 #> 5  -21.1253282   -7.7642560  -78.1609429  -84.7303996  191.7684109  -92.4999442 #> 6   78.5735497  142.8980184  -55.7262802 -198.4822651 -182.1340918   21.4989461 #> 7   88.6533433   -6.8966780 -125.8859840 -176.1368876  -51.0908291  161.7418698 #> 8  194.2552571  -34.5594059    9.9189034  242.7066291   39.7522219 -102.3966925 #> 9"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":". Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sunny AD (2023). StructuralDecompose: Decomposes level shifted time series. R package version 0.1.0, https://allen-1242.github.io/StructuralDecompose/.","code":"@Manual{,   title = {StructuralDecompose: Decomposes a level shifted time series},   author = {Allen Daniel Sunny},   year = {2023},   note = {R package version 0.1.0},   url = {https://allen-1242.github.io/StructuralDecompose/}, }"},{"path":"/index.html","id":"structuraldecompose","dir":"","previous_headings":"","what":"Decomposes a level shifted time series ","title":"Decomposes a level shifted time series ","text":"Note: package construction, please use current version R Python . website updated coming days StructuralDecompose algorithm suited decomposition time series ’s component terms trend, seasonality residuals. well suited decompose series presence significant level shifts. algorithm outputs decomposed trend, seasonality, residuals well anomalies detected. Please note package currently submitted CRAN. CRAN submissions take long time. Please use github download access code.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Decomposes a level shifted time series ","text":"can install development version StructuralDecompose like :","code":"package(StructuralDecompose) install_github(\"StructuralDecompose/StructuralDecompose\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Decomposes a level shifted time series ","text":"example code: Note can specify break algorithm smoothing algorithm well. setting set ‘auto’, optimize algorithm use. best keep default algorithms.","code":"library(StructuralDecompose)  StructuralDecompose <- function(Data, frequency = 12, break_algorithm = 'strucchange', smoothening_algorithm = 'lowess', break_level = 0.05, median_level = 0.5, mean_level = 0.5, level_length = 0.5, conf_level = 0.5)"},{"path":"/reference/AnomalyDetection.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic Anomaly detection — AnomalyDetection","title":"Automatic Anomaly detection — AnomalyDetection","text":"Automatic Anomaly detection","code":""},{"path":"/reference/AnomalyDetection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic Anomaly detection — AnomalyDetection","text":"","code":"AnomalyDetection(   timeseries,   frequency = 52,   conf_level = 0.05,   breaks,   window_len = 14 )"},{"path":"/reference/AnomalyDetection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic Anomaly detection — AnomalyDetection","text":"timeseries Given time series frequency Tiemseries frequency, defaults 12 points conf_level Confidence level Anomaly detection breaks breakpoints identified window_len Window length anomaly detection","code":""},{"path":"/reference/AnomalyDetection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic Anomaly detection — AnomalyDetection","text":"list anomalies time series, along time series plot","code":""},{"path":"/reference/LevelCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"minimum level length checks — LevelCheck","title":"minimum level length checks — LevelCheck","text":"minimum level length checks","code":""},{"path":"/reference/LevelCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"minimum level length checks — LevelCheck","text":"","code":"LevelCheck(timeseries, level_length = 10, Breakpoints = c(), breaks)"},{"path":"/reference/LevelCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"minimum level length checks — LevelCheck","text":"timeseries Given time series level_length Mean distance two levels Breakpoints Breakpoints identified breaks breakpoints returned","code":""},{"path":"/reference/LevelCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"minimum level length checks — LevelCheck","text":"series cleaned minimum level check","code":""},{"path":"/reference/MeanCleaning.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean level checks — MeanCleaning","title":"Mean level checks — MeanCleaning","text":"Mean level checks","code":""},{"path":"/reference/MeanCleaning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean level checks — MeanCleaning","text":"","code":"MeanCleaning(   timeseries,   mean_level = 0.5,   Breakpoints = c(),   breaks,   frequency = 52 )"},{"path":"/reference/MeanCleaning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean level checks — MeanCleaning","text":"timeseries Given time series mean_level Mean distance two levels Breakpoints Breakpoints identified breaks breakpoints returned frequency Tiemseries frequency, defaults 12 points","code":""},{"path":"/reference/MeanCleaning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean level checks — MeanCleaning","text":"series cleaned mean check","code":""},{"path":"/reference/MedianCleaning.html","id":null,"dir":"Reference","previous_headings":"","what":"Median level checks — MedianCleaning","title":"Median level checks — MedianCleaning","text":"Median level checks","code":""},{"path":"/reference/MedianCleaning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Median level checks — MedianCleaning","text":"","code":"MedianCleaning(   timeseries,   median_level = 0.5,   Breakpoints = c(),   breaks,   frequency = 52 )"},{"path":"/reference/MedianCleaning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Median level checks — MedianCleaning","text":"timeseries Given time series median_level Median distance two levels Breakpoints Breakpoints identified breaks Breaks identified frequency Tiemseries frequency, defaults 12 points","code":""},{"path":"/reference/MedianCleaning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Median level checks — MedianCleaning","text":"series cleaned median check","code":""},{"path":"/reference/Nile_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Nile River Dataset — Nile_dataset","title":"Nile River Dataset — Nile_dataset","text":"Nile River Dataset","code":""},{"path":"/reference/Nile_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nile River Dataset — Nile_dataset","text":"","code":"BreakPoints(   timeseries,   frequency = 52,   break_algorithm = \"strucchange\",   break_level = 0.05 )"},{"path":"/reference/Nile_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nile River Dataset — Nile_dataset","text":"timeseries Given time series frequency Tiemseries frequency, defaults 12 points break_algorithm Breakpoint algorithm used. Defaults strcchange break_level Additional parameters breakpoint algorithm","code":""},{"path":"/reference/Nile_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nile River Dataset — Nile_dataset","text":"list breakpoints","code":""},{"path":"/reference/Smoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothening of the time series — Smoothing","title":"Smoothening of the time series — Smoothing","text":"Smoothening time series","code":""},{"path":"/reference/Smoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothening of the time series — Smoothing","text":"","code":"Smoothing(   timeseries,   frequency = 52,   smoothening_algorithm = \"lowess\",   breaks = c(0) )"},{"path":"/reference/Smoothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothening of the time series — Smoothing","text":"timeseries Given time series frequency Timeseries frequency, defaults 12 points smoothening_algorithm Smoothening algorithm required breaks Breakpoints identified previous algorithm lowess Lowess smoothener","code":""},{"path":"/reference/Smoothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoothening of the time series — Smoothing","text":"smoothened time series","code":""},{"path":"/reference/StructuralDecompose.html","id":null,"dir":"Reference","previous_headings":"","what":"Main decomposition algorithm — StructuralDecompose","title":"Main decomposition algorithm — StructuralDecompose","text":"Main decomposition algorithm","code":""},{"path":"/reference/StructuralDecompose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main decomposition algorithm — StructuralDecompose","text":"","code":"StructuralDecompose(   Data,   frequency = 12,   break_algorithm = \"strucchange\",   smoothening_algorithm = \"lowess\",   break_level = 0.05,   median_level = 0.5,   mean_level = 0.5,   level_length = 0.5,   conf_level = 0.5,   window_len = 12,   plot = FALSE )"},{"path":"/reference/StructuralDecompose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main decomposition algorithm — StructuralDecompose","text":"Data Time series required frequency Frequency tine series break_algorithm breakpoints algorithm used. Defaults strucchange smoothening_algorithm Smoothing algorithm used. Defaults lowess break_level Break level breakpoints algorithm median_level Average median distance two level mean_level Average mean distance group points near breakpoints level_length Minimum number points required determine level conf_level Confidence level Anomaly detection, best keep static value window_len Length Moving window Anomaly Detection plot True False indicating want internal plots generated","code":""},{"path":"/reference/StructuralDecompose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main decomposition algorithm — StructuralDecompose","text":"decomposed time series along host metrics","code":""},{"path":"/news/index.html","id":"structuraldecompose-010","dir":"Changelog","previous_headings":"","what":"StructuralDecompose 0.1.0","title":"StructuralDecompose 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
