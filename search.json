[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Allen Daniel Sunny Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Decomposition.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Decomposition","text":"univariate time series data can broken three major components. cyclic repeated motion, general growth pattern remaining unexplained portion. Popularly Seasonality/Cyclicity, Trend Residuals respectively. component can treated separately, summed together get final time series.","code":""},{"path":"/articles/Decomposition.html","id":"trend","dir":"Articles","previous_headings":"","what":"Trend","title":"Decomposition","text":"Trend underlying motion time series can variety forms. can increasing, decreasing can highly random movements. StructuralDecompose, assume trend can broken many different parts based upon breakpoints identified series. different versions Trend","code":"data <- StructuralDecompose::Nile_dataset[,1]  x <- StructuralDecompose(data) x$trend"},{"path":"/articles/Decomposition.html","id":"seasonality","dir":"Articles","previous_headings":"","what":"Seasonality","title":"Decomposition","text":"Seasonality repeated motion time series. Seasonality can broadly either Additive multiplicative. StructuralDecompose automatically identifies seasonality type treats accordingly. two different types seasonality","code":"x <- StructuralDecompose(data) x$seasonality"},{"path":"/articles/Example-Walkthrough.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example-Walkthrough","text":"example, go various features StructuralDecompose. trace ’s behavior popular ‘Nile Dataset’ tracks annual flow Nile river. dataset single break-point series. test algorithm common trend fitting algorithms well.","code":""},{"path":"/articles/Example-Walkthrough.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Example-Walkthrough","text":"StructuralDecompose primarily relies ‘Strucchange’ ‘changepoints’ detection breakpoints. packages added soon. Currently smoothening algorithm defaults loess, add smoothening algorithms future.","code":"library(changepoint) #> Loading required package: zoo #>  #> Attaching package: 'zoo' #> The following objects are masked from 'package:base': #>  #>     as.Date, as.Date.numeric #> Successfully loaded changepoint package version 2.2.4 #>  See NEWS for details of changes. library(strucchange) #> Loading required package: sandwich"},{"path":"/articles/Example-Walkthrough.html","id":"loading-the-data","dir":"Articles","previous_headings":"","what":"Loading the Data","title":"Example-Walkthrough","text":"read data can use simple: Let’s see movement data time  sudden level shift within data, let’s see decompose simple stl see well data movement captured.","code":"data <- StructuralDecompose::Nile_dataset[,1] matplot(data, type = 'l', xlab = 'Years', ylab = 'Annual Flow of the Nile (10^8 m^3') data <- StructuralDecompose::Nile_dataset[,1]  data = ts(data = as.vector(t(data)), frequency = 2)  decomposed <- stl(data, s.window = 'periodic')  seasonal <- decomposed$time.series[,1] trend <- decomposed$time.series[,2] remainder <- decomposed$time.series[,3]"},{"path":"/articles/Example-Walkthrough.html","id":"decomposition","dir":"Articles","previous_headings":"","what":"Decomposition","title":"Example-Walkthrough","text":"Let’s decompose time series parts observe ’s behavior  can see trend overexplains time series can see trend overexplains time series","code":"plot(cbind(seasonal, remainder, trend), type = 'l', main = 'Decomposed Series') matplot(cbind(trend, data), type = 'l', xlab = 'Years', ylab = 'Annual Flow of the Nile (10^8 m^3', main = 'Trend vs Base Data')"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":". Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sunny AD (2023). StructuralDecompose: Decomposes level shifted time series. R package version 0.1.0, https://allen-1242.github.io/StructuralDecompose/.","code":"@Manual{,   title = {StructuralDecompose: Decomposes a level shifted time series},   author = {Allen Daniel Sunny},   year = {2023},   note = {R package version 0.1.0},   url = {https://allen-1242.github.io/StructuralDecompose/}, }"},{"path":"/index.html","id":"structuraldecompose","dir":"","previous_headings":"","what":"Decomposes a level shifted time series ","title":"Decomposes a level shifted time series ","text":"Note: package construction, please use current version R Python . website updated coming days StructuralDecompose algorithm suited decomposition time series ’s component terms trend, seasonality residuals. well suited decompose series presence significant level shifts. algorithm outputs decomposed trend, seasonality, residuals well anomalies detected. Please note package currently submitted CRAN. CRAN submissions take long time. Please use github download access code.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Decomposes a level shifted time series ","text":"can install development version StructuralDecompose like :","code":"package(StructuralDecompose) install_github(\"StructuralDecompose/StructuralDecompose\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Decomposes a level shifted time series ","text":"example code: Note can specify break algorithm smoothing algorithm well. setting set ‘auto’, optimize algorithm use. best keep default algorithms.","code":"library(StructuralDecompose)  StructuralDecompose <- function(Data, frequency = 12, break_algorithm = 'strucchange', smoothening_algorithm = 'lowess', break_level = 0.05, median_level = 0.5, mean_level = 0.5, level_length = 0.5, conf_level = 0.5)"},{"path":"/reference/AnomalyDetection.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic Anomaly detection — AnomalyDetection","title":"Automatic Anomaly detection — AnomalyDetection","text":"Automatic Anomaly detection","code":""},{"path":"/reference/AnomalyDetection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic Anomaly detection — AnomalyDetection","text":"","code":"AnomalyDetection(   timeseries,   frequency = 52,   conf_level = 0.05,   breaks,   window_len = 14 )"},{"path":"/reference/AnomalyDetection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic Anomaly detection — AnomalyDetection","text":"timeseries Given time series frequency Tiemseries frequency, defaults 12 points conf_level Confidence level Anomaly detection breaks breakpoints identified window_len Window length anomaly detection","code":""},{"path":"/reference/AnomalyDetection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic Anomaly detection — AnomalyDetection","text":"list anomalies time series, along time series plot","code":""},{"path":"/reference/LevelCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"minimum level length checks — LevelCheck","title":"minimum level length checks — LevelCheck","text":"minimum level length checks","code":""},{"path":"/reference/LevelCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"minimum level length checks — LevelCheck","text":"","code":"LevelCheck(timeseries, level_length = 10, Breakpoints = c(), breaks)"},{"path":"/reference/LevelCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"minimum level length checks — LevelCheck","text":"timeseries Given time series level_length Mean distance two levels Breakpoints Breakpoints identified breaks breakpoints returned","code":""},{"path":"/reference/LevelCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"minimum level length checks — LevelCheck","text":"series cleaned minimum level check","code":""},{"path":"/reference/MeanCleaning.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean level checks — MeanCleaning","title":"Mean level checks — MeanCleaning","text":"Mean level checks","code":""},{"path":"/reference/MeanCleaning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean level checks — MeanCleaning","text":"","code":"MeanCleaning(   timeseries,   mean_level = 0.5,   Breakpoints = c(),   breaks,   frequency = 52 )"},{"path":"/reference/MeanCleaning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean level checks — MeanCleaning","text":"timeseries Given time series mean_level Mean distance two levels Breakpoints Breakpoints identified breaks breakpoints returned frequency Tiemseries frequency, defaults 12 points","code":""},{"path":"/reference/MeanCleaning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean level checks — MeanCleaning","text":"series cleaned mean check","code":""},{"path":"/reference/MedianCleaning.html","id":null,"dir":"Reference","previous_headings":"","what":"Median level checks — MedianCleaning","title":"Median level checks — MedianCleaning","text":"Median level checks","code":""},{"path":"/reference/MedianCleaning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Median level checks — MedianCleaning","text":"","code":"MedianCleaning(   timeseries,   median_level = 0.5,   Breakpoints = c(),   breaks,   frequency = 52 )"},{"path":"/reference/MedianCleaning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Median level checks — MedianCleaning","text":"timeseries Given time series median_level Median distance two levels Breakpoints Breakpoints identified breaks Breaks identified frequency Tiemseries frequency, defaults 12 points","code":""},{"path":"/reference/MedianCleaning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Median level checks — MedianCleaning","text":"series cleaned median check","code":""},{"path":"/reference/Nile_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Nile River Dataset — Nile_dataset","title":"Nile River Dataset — Nile_dataset","text":"Nile River Dataset","code":""},{"path":"/reference/Nile_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nile River Dataset — Nile_dataset","text":"","code":"BreakPoints(   timeseries,   frequency = 52,   break_algorithm = \"strucchange\",   break_level = 0.05 )"},{"path":"/reference/Nile_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nile River Dataset — Nile_dataset","text":"timeseries Given time series frequency Tiemseries frequency, defaults 12 points break_algorithm Breakpoint algorithm used. Defaults strcchange break_level Additional parameters breakpoint algorithm","code":""},{"path":"/reference/Nile_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nile River Dataset — Nile_dataset","text":"list breakpoints","code":""},{"path":"/reference/Smoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothening of the time series — Smoothing","title":"Smoothening of the time series — Smoothing","text":"Smoothening time series","code":""},{"path":"/reference/Smoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothening of the time series — Smoothing","text":"","code":"Smoothing(   timeseries,   frequency = 52,   smoothening_algorithm = \"lowess\",   breaks = c(0) )"},{"path":"/reference/Smoothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothening of the time series — Smoothing","text":"timeseries Given time series frequency Timeseries frequency, defaults 12 points smoothening_algorithm Smoothening algorithm required breaks Breakpoints identified previous algorithm lowess Lowess smoothener","code":""},{"path":"/reference/Smoothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoothening of the time series — Smoothing","text":"smoothened time series","code":""},{"path":"/reference/StructuralDecompose.html","id":null,"dir":"Reference","previous_headings":"","what":"Main decomposition algorithm — StructuralDecompose","title":"Main decomposition algorithm — StructuralDecompose","text":"Main decomposition algorithm","code":""},{"path":"/reference/StructuralDecompose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main decomposition algorithm — StructuralDecompose","text":"","code":"StructuralDecompose(   Data,   frequency = 12,   break_algorithm = \"strucchange\",   smoothening_algorithm = \"lowess\",   break_level = 0.05,   median_level = 0.5,   mean_level = 0.5,   level_length = 0.5,   conf_level = 0.5,   window_len = 12,   plot = FALSE )"},{"path":"/reference/StructuralDecompose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main decomposition algorithm — StructuralDecompose","text":"Data Time series required frequency Frequency tine series break_algorithm breakpoints algorithm used. Defaults strucchange smoothening_algorithm Smoothing algorithm used. Defaults lowess break_level Break level breakpoints algorithm median_level Average median distance two level mean_level Average mean distance group points near breakpoints level_length Minimum number points required determine level conf_level Confidence level Anomaly detection, best keep static value window_len Length Moving window Anomaly Detection plot True False indicating want internal plots generated","code":""},{"path":"/reference/StructuralDecompose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main decomposition algorithm — StructuralDecompose","text":"decomposed time series along host metrics","code":""},{"path":"/news/index.html","id":"structuraldecompose-010","dir":"Changelog","previous_headings":"","what":"StructuralDecompose 0.1.0","title":"StructuralDecompose 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
