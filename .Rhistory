#Initial Sanity checks
if(!is.numeric(frequency)  || !is.numeric(break_level) || !is.numeric(mean_level) || !is.numeric(median_level) || !is.numeric(level_length) || !is.numeric(conf_level) || !is.numeric(window_len))
{
stop(print('Value needs to be numeric'))
}
if(!is.logical(plot))
{
stop(print('Value needs to be boolean'))
}
!is.logical(plot)
plot = FALSE
print('Value needs to be boolean')
}
@importFrom stats ts
#Initial Sanity checks
if(!is.numeric(frequency)  || !is.numeric(break_level) || !is.numeric(mean_level) || !is.numeric(median_level) || !is.numeric(level_length) || !is.numeric(conf_level) || !is.numeric(window_len))
{
stop(print('Value needs to be numeric'))
}
if(!is.logical(plot))
{
stop(print('Value needs to be boolean'))
}
Break_points <- BreakPoints(timeseries = Data, frequency = frequency, break_algorithm = break_algorithm, break_level = break_level)
Break_points
Break_points <- MedianCleaning(timeseries = Data, breaks = Break_points, frequency = frequency, median_level = 0.5)
Break_points
MedianCleaning(timeseries = Data, breaks = Break_points, frequency = frequency, median_level = 0.5)
timeseries = Data
breaks = Break_points
median_level = 0.5
#Writing the breakpoints
t <- vector()
if(any(is.na(breaks)))
{
t <- c(0, length(timeseries))
}else
{
t <- breaks
}
p1 <- vector()
p2 <- vector()
#Seasonal check for level changes
if(frequency != 1)
{
difference_mat <- outer(t,t, "-")
difference_table <- which(difference_mat == frequency , arr.ind = TRUE)
difference_table <- data.frame(difference_table)
if(dim(difference_table)[1] != 0)
{
for(l in seq (from = 1 , to = c(dim(difference_table)[1]), by = 1))
{
p1 <- c(t[difference_table['row'][l,]], t[difference_table['col'][l,]])
p2 <- c(p2, p1)
}
}
}else
{
p2 <- t
}
t <- t[!(t %in% p2)]
#Median cleaning of breakpoints
med_flag <- FALSE
n <- length(timeseries)
k <- vector()
i <- 1
j <- 3
while(i < n)
{
while(j < n+1)
{
L <- t[i]
R <- t[j]
Lr <- t[i+1]
if((is.na(R)))
{
med_flag = TRUE
return(k)
}
mid1 <- median(timeseries[c(L+1) : c(Lr)])
mid2 <- median(timeseries[c(Lr + 1)] : (R))
if(mid2 == 0)
{
mid2 <- 0.0000001
}
if((abs(mid1/mid2) > median_level) || abs(mid2/mid1 > median_level))
{
k <- c(k , Lr)
if(is.na(k))
{
k <- c(0, length(timeseries))
}else
{
k <- c(0, k, length(timeseries))
}
return(k)
}else
{
t <- t[t!=Lr]
}
}
i <- i + 1
j <- j + 1
L <- t[i]
if(med_flag == TRUE)
{
if(is.na(k))
{
k <- c(0, length(timeseries))
}else
{
k <- c(0, k, length(timeseries))
}
return(k)
}
}
#Writing the breakpoints
if(any(is.na(k)))
{
k <- c(0, length(timeseries))
}else
{
k <- c(0, k, length(timeseries))
}
k
Break_points <- MedianCleaning(timeseries = Data, breaks = Break_points, frequency = frequency, median_level = 0.5)
Break_points
MedianCleaning(timeseries = runif(n = 50, min = 1, max = 10), breaks = c(1,4,5))
MedianCleaning(timeseries = StructuralDecompose::Nile_dataset[,1], breaks = c(1,4,5))
runif(n = 50, min = 1, max = 10)
breaks
breaks = Break_points
breaks
Break_points
Break_points <- BreakPoints(timeseries = Data, frequency = frequency, break_algorithm = break_algorithm, break_level = break_level)
breaks = Break_points
breaks
breaks
MedianCleaning(timeseries = runif(n = 50, min = 1, max = 10), breaks = c(0,50))
breaks = c(0,50)
#Writing the breakpoints
t <- vector()
if(any(is.na(breaks)))
{
t <- c(0, length(timeseries))
}else
{
t <- breaks
}
p1 <- vector()
p2 <- vector()
#Seasonal check for level changes
if(frequency != 1)
{
difference_mat <- outer(t,t, "-")
difference_table <- which(difference_mat == frequency , arr.ind = TRUE)
difference_table <- data.frame(difference_table)
if(dim(difference_table)[1] != 0)
{
for(l in seq (from = 1 , to = c(dim(difference_table)[1]), by = 1))
{
p1 <- c(t[difference_table['row'][l,]], t[difference_table['col'][l,]])
p2 <- c(p2, p1)
}
}
}else
{
p2 <- t
}
t <- t[!(t %in% p2)]
#Median cleaning of breakpoints
med_flag <- FALSE
n <- length(timeseries)
k <- vector()
i <- 1
j <- 3
while(i < n)
{
while(j < n+1)
{
L <- t[i]
R <- t[j]
Lr <- t[i+1]
if((is.na(R)))
{
med_flag = TRUE
return(k)
}
mid1 <- median(timeseries[c(L+1) : c(Lr)])
mid2 <- median(timeseries[c(Lr + 1)] : (R))
if(mid2 == 0)
{
mid2 <- 0.0000001
}
if((abs(mid1/mid2) > median_level) || abs(mid2/mid1 > median_level))
{
k <- c(k , Lr)
if(is.na(k))
{
k <- c(0, length(timeseries))
}else
{
k <- c(0, k, length(timeseries))
}
return(k)
}else
{
t <- t[t!=Lr]
}
}
i <- i + 1
j <- j + 1
L <- t[i]
if(med_flag == TRUE)
{
if(is.na(k))
{
k <- c(0, length(timeseries))
}else
{
k <- c(0, k, length(timeseries))
}
return(k)
}
}
#Writing the breakpoints
if(any(is.na(k)))
{
k <- c(0, length(timeseries))
}else
{
k <- c(0, k, length(timeseries))
}
k
MedianCleaning(timeseries = runif(n = 50, min = 1, max = 10), breaks = c(0,50))
median_level
frequency
frequency
frequency = 52
#Writing the breakpoints
if(any(is.na(k)))
{
k <- c(0, length(timeseries))
}else
{
k <- c(0, k, length(timeseries))
}
k
rm(k)
MedianCleaning(timeseries = runif(n = 50, min = 1, max = 10), breaks = c(0,50))
#Median cleaning of breakpoints
med_flag <- FALSE
n <- length(timeseries)
k <- vector()
i <- 1
j <- 3
k <- vector(0, n)
k <- vector(c(0, n))
k <- vector()
MedianCleaning <- function(timeseries, median_level = 0.5, breaks, frequency = 52)
{
#Writing the breakpoints
t <- vector()
if(any(is.na(breaks)))
{
t <- c(0, length(timeseries))
}else
{
t <- breaks
}
p1 <- vector()
p2 <- vector()
#Seasonal check for level changes
if(frequency != 1)
{
difference_mat <- outer(t,t, "-")
difference_table <- which(difference_mat == frequency , arr.ind = TRUE)
difference_table <- data.frame(difference_table)
if(dim(difference_table)[1] != 0)
{
for(l in seq (from = 1 , to = c(dim(difference_table)[1]), by = 1))
{
p1 <- c(t[difference_table['row'][l,]], t[difference_table['col'][l,]])
p2 <- c(p2, p1)
}
}
}else
{
p2 <- t
}
t <- t[!(t %in% p2)]
#Median cleaning of breakpoints
med_flag <- FALSE
n <- length(timeseries)
k <- vector()
i <- 1
j <- 3
while(i < n)
{
while(j < n+1)
{
L <- t[i]
R <- t[j]
Lr <- t[i+1]
if((is.na(R)))
{
med_flag = TRUE
k <- c(0, length(timeseries))
return(k)
}
mid1 <- median(timeseries[c(L+1) : c(Lr)])
mid2 <- median(timeseries[c(Lr + 1)] : (R))
if(mid2 == 0)
{
mid2 <- 0.0000001
}
if((abs(mid1/mid2) > median_level) || abs(mid2/mid1 > median_level))
{
k <- c(k , Lr)
if(is.na(k))
{
k <- c(0, length(timeseries))
}else
{
k <- c(0, k, length(timeseries))
}
return(k)
}else
{
t <- t[t!=Lr]
}
}
i <- i + 1
j <- j + 1
L <- t[i]
if(med_flag == TRUE)
{
if(is.na(k))
{
k <- c(0, length(timeseries))
}else
{
k <- c(0, k, length(timeseries))
}
return(k)
}
}
#Writing the breakpoints
if(any(is.na(k)))
{
k <- c(0, length(timeseries))
}else
{
k <- c(0, k, length(timeseries))
}
return(k)
}
MedianCleaning(timeseries = runif(n = 50, min = 1, max = 10), breaks = c(0,50))
MedianCleaning(timeseries = runif(n = 50, min = 1, max = 10), breaks = c(0,50))
StructuralDecompose(Data = runif(n = 50, min = 1, max = 10))
library(StructuralDecompose)
StructuralDecompose(Data = runif(n = 50, min = 1, max = 10))
StructuralDecompose(Data = StructuralDecompose::Nile_dataset[,1])
devtools::document()
#devtools::test()
devtools::check()
devtools::document()
#devtools::test()
devtools::check()
devtools::build()
devtools::build_vignettes(clean = TRUE)
devtools::spell_check()
devtools::document()
library(rhub)
library(devtools)
library(goodpractice)
devtools::install_deps()
devtools::test_coverage()
devtools::test_coverage()
rhub::check_for_cran()
devtools::check_rhub()
goodpractice::gp()
warning('Heartattack')
stop('Value needs to be numeric')
library(StructuralDecompose)
devtools::document()
devtools::test()
devtools::check()
devtools::build()
devtools::build_vignettes(clean = TRUE)
#Update Definceny
devtools::install_deps()
#Test coverage
devtools::test_coverage()
#Update Definceny
devtools::install_deps()
#Test coverage
devtools::test_coverage()
#Update Definceny
devtools::install_deps()
#Test coverage
devtools::test_coverage()
rhub::check_for_cran()
devtools::check_rhub()
goodpractice::gp()
devtools::spell_check()
data <- StructuralDecompose::Nile_dataset[,1]
data <- ts(data = as.vector(t(data)), frequency = 12)
decomposed <- stl(data, s.window = 'periodic')
seasonal <- decomposed$time.series[,1]
trend <- decomposed$time.series[,2]
remainder <- decomposed$time.series[,3]
plot(cbind(seasonal, remainder, trend), type = 'l', main = 'Decomposed Series')
matplot(cbind(trend, data), type = 'l', xlab = 'Years', ylab = 'Annual Flow of the Nile (10^8 m^3', main = 'Trend vs Base Data')
Trend <- lowess(data)$y
matplot(cbind(Trend, data), type = 'l', xlab = 'Years', ylab = 'Annual Flow of the Nile (10^8 m^3', main = 'Smoothened Trend vs Base Data')
Results <- StructuralDecompose::StructuralDecompose(Data = data)
matplot(cbind(Results$trend_line, data), type = 'l', xlab = 'Years', ylab = 'Annual Flow of the Nile (10^8 m^3', main = 'New Trend vs Base Data')
matplot(cbind(as.numeric(Results$seasonality), c(data - Results$trend_line)), type = 'l', xlab = 'Years', ylab = 'Annual Flow of the Nile 10^8 m^3',main = 'Seasonality vs Detrended Data')
matplot(cbind(as.numeric(seasonal), c(data - trend)), type = 'l', xlab = 'Years', ylab = 'Annual Flow of the Nile 10^8 m^3',main = 'Seasonality vs Detrended Data')
devtools::spell_check()
devtools::build_vignettes(clean = TRUE)
devtools::check()
devtools::check_win_release()
usethis::use_cran_comments()
usethis::use_cran_comments()
usethis::use_version()
devtools::document()
devtools::test()
devtools::check()
devtools::build()
usethis::use_version()
usethis::use_version()
devtools::document()
devtools::test()
devtools::check()
devtools::build()
devtools::release()
devtools::spell_check()
library(StructuralDecompose)
devtools::spell_check()
rhub::check_for_cran()
devtools::document()
devtools::test()
devtools::check()
devtools::build()
devtools::build_vignettes(clean = TRUE)
devtools::build()
usethis::use_version()
usethis::use_version()
usethis::use_cran_comments()
devtools::document()
devtools::document()
devtools::check()
devtools::install_deps()
rhub::check_for_cran()
devtools::document()
devtools::test()
devtools::check()
devtools::build()
rhub::check_for_cran()
devtools::document()
devtools::test()
devtools::check()
devtools::build()
rhub::check_for_cran()
devtools::check_rhub()
devtools::install_deps()
devtools::test_coverage()
rhub::check_for_cran()
devtools::document()
devtools::test()
devtools::check()
devtools::build
devtools::spell_check()
devtools::build()
devtools::spell_check()
#Update Definceny
devtools::install_deps()
#internal building and testing
devtools::document()
devtools::test()
devtools::check()
devtools::build()
devtools::spell_check()
devtools::test_coverage()
devtools::test_coverage()
rhub::check_for_cran()
devtools::check_rhub()
goodpractice::gp()
devtools::spell_check()
devtools::check_win_release()
devtools::release()
devtools::spell_check()
devtools::release()
devtools::release()
usethis::use_badge()
usethis::use_cran_badge()
usethis::use_cran_badge()
usethis::use_cran_badge()
usethis::use_logo("man/figures/logo.png")
install.packages("usethis")
usethis::use_logo("man/figures/logo.png")
devtools::build_readme()
install.packages("devtools")
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
usethis::use_readme_rmd()
cleR
usethis::use_logo("man/figures/logo.png")
clear
